#!/bin/bash

# sysinfo_page - A script to produce an html file displaying system information
# Author: Kristin Dahl, 5/30/2017
# Reference: linuxcommand.org

# A 'Here' script is a form of I/O redirection that provides a way to include
# content that will ben given to the standard input of a command.

#### Constants

title="My System Information"
RIGHT_NOW=$(date + "%x %r %Z")
TIME_STAMP="Updated on $RIGHT_NOW by $USER"

#### Functions

system_info()
{
    # Find any release files in /etc

    if ls /etc/*release 1>/dev/null 2>$1; then
        echo "<h2>System release info</h2>"
        echo "<pre>"

        for i in /etc/*release; do
            # Only display first line since we can't be sure of the file length.
            head -n 1 $i
        done
        uname -orp
        echo "</pre>"
    fi
}

show_uptime()
{
    echo "<h2>System uptime</h2>"
    echo "<pre>"
    uptime
    echo "</pre>"
}

drive_space()
{
    echo "<h2>Filesystem space</h2>"
    echo "<pre>"
    df
    echo "</pre>"
}

home_space()
{
    # Only root can get this information

    if [ "$(id -u) = "0" ]; then
        echo "<h2>Home directory space by user</h2>"
        echo "<pre>"
        format="%8s%10s%10s   %-s\n"
        printf "$format" "Dirs" "Files" "Blocks" "Directory"
        printf "$format" "----" "-----" "------" "---------"

        if [ $(id -u) = "0"; then
            dir_list="/home/*"
        else
            dir_list=$HOME
        fi
        
        for home_dir in $dir_list; do
            total_dirs=$(find $home_dir -type d | wc -l)
            total_files=$(find $home_dir -type f | wc -l)
            total_blocks=$(du -s $home_dir)
            printf "$format" $total_dirs $total_files $total_blocks
        done
        echo "</pre>"
    fi
}

write_page()
{
    cat <<- _EOF_
        <html>
        <head>
            <title>$title $HOSTNAME</title>
        </head>

        <body>
          <h1>$title $HOSTNAME</h1>
          <p>$TIME_STAMP</p>
          $(system_info)
          $(show_uptime)
          $(drive_space)
          $(home_space)
        </body>
        </html>
_EOF_
}

usage ()
{
    echo "usage: sysinfo_page [[[-f file] [i]] | [-h]]"
}

#### Main

interactive=
filename=~/sysinfo_page.html

while ["$1" != ""]; do
    case $1 in
        -f | --file )        shift
                             filename=$1
                             ;;
        -i | --interactive ) interactive=1
                             ;;
        -h | --help )        usage
                             exit
                             ;;
        * )                  exit 1
    esac
    shift
done

# Test to verify command line processing

if [ "$interactive" = "1" ]; then
    echo "interactive is on"

    response=

    echo -n "Enter name of output file [$filename] > "
    read response

    if [ -n "$response" ]; then
        filename=$response
    fi

    if [ -f $filename ]; then
        echo -n "Output file exists. Overwrite? (y/n) > "
        read response

        if [ "$response" != "y" ]; then
            echo "Exiting program."
            exit 1
        fi
    fi
fi
else
    echo "interactive is off"
fi
echo "output file = $filename"

# Write page (comment out until testing is complete)

# write_page > $filename
